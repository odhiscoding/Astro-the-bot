  !echo "GEMINI_API_KEY='your_api_key_here'" > .env
!pip install python-dotenv requests
def get_game_recommendations(preferences):
    url = "https://gemini-api-endpoint"
    headers = {
        "Authorization": f"Bearer {GEMINI_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "genre": preferences['genre'],
        "platform": preferences['platform'],
        "gameplay_style": preferences['gameplay_style']
    }

    response = requests.post(url, json=payload, headers=headers)

    try:

        return response.json()
    except ValueError:

        return response.text
import requests

api_key = "YOUR_API_KEY_HERE"

def get_game_recommendations(query):
    api_url = "https://geminiapi.com/videogames/recommend"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "query": query
    }

    try:
        response = requests.post(api_url, headers=headers, json=payload)

        if response.status_code == 200:
            recommendations = response.json()
            return recommendations
        else:
            return {"error": f"API request failed with status code {response.status_code}: {response.text}"}
    except Exception as e:
        return {"error": f"An error occurred: {str(e)}"}

response = get_game_recommendations("open world RPG on PC")
print(response)
knowledge_base = {
    "What is the storyline of The Legend of Zelda?": "The Legend of Zelda follows Link, a young hero, as he battles evil forces to rescue Princess Zelda and protect the land of Hyrule.",
    "Can you recommend a good RPG?": "I recommend The Witcher 3: Wild Hunt for its rich story and expansive world!",
    "What are the best tips for Dark Souls?": "Focus on timing your dodges, learn enemy patterns, and don't be afraid to grind for levels!",
    "Tell me about Final Fantasy VII.": "Final Fantasy VII follows Cloud Strife and his friends as they fight against the corrupt Shinra Corporation and the mysterious Sephiroth."
}

def get_recommendation(genre):
    """Provide game recommendations based on the specified genre."""
    recommendations = {
        "rpg": "I recommend The Witcher 3: Wild Hunt or Dark Souls for their immersive stories.",
        "action": "How about trying God of War or Devil May Cry 5? They're both action-packed!",
        "strategy": "You might enjoy Sid Meier's Civilization VI or XCOM 2 for some strategic gameplay!",
        "adventure": "Consider playing Uncharted 4 or The Legend of Zelda: Breath of the Wild!",
        "simulation": "You might enjoy: " + ", ".join([
            "The Sims 4",
            "Stardew Valley",
            "Cities: Skylines",
            "Planet Coaster",
            "Microsoft Flight Simulator"
        ]),
        "horror": "You might enjoy: " + ", ".join([
            "Resident Evil 2",
            "Silent Hill 2",
            "Amnesia: The Dark Descent",
            "Outlast",
            "The Last of Us"
        ]),
        "multiplayer": "You might enjoy: " + ", ".join([
            "Among Us",
            "Fortnite",
            "Call of Duty: Warzone",
            "Apex Legends",
            "Rainbow Six Siege"
        ])
    }

    return recommendations.get(genre.lower(), "I can help with recommendations! What genre do you prefer?")

def respond_to_query(prompt):
    """Respond to user queries using the knowledge base."""
    response = knowledge_base.get(prompt)


    keywords = ["recommend", "game", "play", "good game"]
    if any(keyword in prompt.lower() for keyword in keywords):
        return "I can give recommendations!"

    return response if response else None

print("Hi, I'm Astro the bot, here to help!")

while True:
    my_prompt = input("What may I do for you today? (Type 'exit' to quit): ")

    if my_prompt.lower() == 'exit':
        print("Thanks for chatting! Goodbye!")
        break

    response = respond_to_query(my_prompt)

    if response:
        print(response)


        if response == "I can give recommendations!":
            genre = input("What genre do you prefer? (e.g., RPG, action, strategy, adventure): ")
            print(get_recommendation(genre))
    else:
        print("I'm not sure about that. Can you ask me something else?")
        genre = input("What genre do you prefer? (e.g., RPG, action, strategy, adventure): ")
        print(get_recommendation(genre))

    print("\nFeel free to ask something else, or type 'exit' to leave.")

